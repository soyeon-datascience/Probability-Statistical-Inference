"0","#' A single play of the Martingale strategy"
"0","#' number of plays  number, the number of plays in roulette"
"0","#' Takes a state list, spins the roulette wheel, returns the state list with updated values (for example, budget, plays, etc)"
"0","#' @param state A list with the following entries: "
"0","#'   B              number, the budget"
"0","#'   W              number, the budget threshold for successfully stopping"
"0","#'   L              number, the maximum number of plays "
"0","#'   M              number, the casino wager limit"
"0","#'   plays          integer, the number of plays executed"
"0","#'   previous_wager number, the wager in the previous play (0 at first play)"
"0","#'   previous_win   TRUE/FALSE, indicator if the previous play was a win (TRUE at first play)"
"0",""
"0","#' @return The updated state list"
"0","one_play <- function(state){"
"0","  "
"0","    # Wager"
"0","    proposed_wager <- ifelse(state$previous_win, 1, 2*state$previous_wager)"
"0","    wager <- min(proposed_wager, state$M, state$B)"
"0",""
"0","    # Spin of the wheel"
"0","    red <- rbinom(1,1,18/38)"
"0"," "
"0","    # Update state"
"0","    state$plays <- state$plays + 1"
"0","    state$previous_wager <- wager"
"0","    if(red){"
"0","      # WIN"
"0","      state$B <- state$B + wager"
"0","      state$previous_win <- TRUE"
"0","    }else{"
"0","      # LOSE"
"0","      state$B <- state$B - wager"
"0","      state$previous_win <- FALSE"
"0","    }"
"0","  state"
"0","}"
"0",""
"0","#' Stopping rule"
"0","#'"
"0","#' Takes the state list and determines if the gambler has to stop"
"0","#' @param state A list.  See one_play"
"0","#' @return TRUE/FALSE"
"0","stop_play <- function(state){"
"0","  if(state$B <= 0) return(TRUE)"
"0","  if(state$plays >= state$L) return(TRUE)"
"0","  if(state$B >= state$W) return(TRUE)"
"0","  FALSE"
"0","}"
"0",""
"0","#' Play roulette to either bankruptcy, success, or play limits"
"0","#'"
"0","#' @param B number, the starting budget"
"0","#' @param W number, the budget threshold for successfully stoping"
"0","#' @param L number, the maximum number of plays "
"0","#' @param M number, the casino wager limit"
"0","#' @return A vector of budget values calculated after each play."
"0","one_series <- function("
"0","    B = 200"
"0","  , W = 300"
"0","  , L = 1000"
"0","  , M = 100"
"0","){"
"0",""
"0","  # initial state"
"0","  state <- list("
"0","    B = B"
"0","  , W = W"
"0","  , L = L"
"0","  , M = M"
"0","  , plays = 0"
"0","  , previous_wager = 0"
"0","  , previous_win = TRUE"
"0","  )"
"0",""
"0","  # vector to store budget over series of plays"
"0","  budget <- rep(NA, L)"
"0","  "
"0","  # For loop of plays"
"0","  for(i in 1:L){"
"0","    new_state <- state %>% one_play"
"0","    budget[i] <- new_state$B"
"0","    if(new_state %>% stop_play){"
"0","      return(budget[1:i])"
"0","    }"
"0","    state <- new_state"
"0","  }"
"0","  budget    "
"0","}"
"0",""
"0","# helper function"
"0","get_last <- function(x) x[length(x)] "
"0",""
"0","# Simulation"
"0","walk_out_money <- rep(NA, 10000)"
"0","for(j in seq_along(walk_out_money)){"
"0","  walk_out_money[j] <- one_series(B = 200, W = 300, L = 1000, M = 100) %>% get_last"
"0","}"
"0",""
"0","# Walk out money distribution"
"0","hist(walk_out_money, breaks = 100)"
