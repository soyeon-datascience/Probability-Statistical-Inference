))
c(game$prize[game$first_guess == 1], game$prize[game$switch == 1])
prize <- sample(c("goat","goat","car"), 3)
data.frame(door = 1:3, prize = prize, stringsAsFactors = FALSE) %>%
mutate(first_guess = case_when(
door == guess ~ 1
, TRUE ~ 0
)) %>%
mutate(potential_reveal = case_when(
first_guess == 1 ~ 0
, prize == "car" ~ 0
, TRUE ~ 1
)) %>%
mutate(reveal = 1*(rank(potential_reveal, ties.method = "random") == 3)) %>%
mutate(switch = case_when(
first_guess == 1 ~ 0
, reveal == 1 ~ 0
, TRUE ~ 1
))
require(magrittr)
require(dplyr)
game <- function(){
prize <- sample(c("goat","goat","car"), 3) # Assigning the sequence of car
guess <- sample(1:3,1) # First my guess
game <- data.frame(door = 1:3, prize = prize, stringsAsFactors = FALSE) %>%
mutate(first_guess = case_when(
door == guess ~ 1
, TRUE ~ 0
)) %>%
mutate(potential_reveal = case_when(
first_guess == 1 ~ 0
, prize == "car" ~ 0
, TRUE ~ 1
)) %>%
mutate(reveal = 1*(rank(potential_reveal, ties.method = "random") == 3)) %>%
mutate(switch = case_when(
first_guess == 1 ~ 0
, reveal == 1 ~ 0
, TRUE ~ 1
))
c(game$prize[game$first_guess == 1], game$prize[game$switch == 1])
}
game_number <- rep(NA, 1000)
for (j in seq_along(game_number)) {
game_number[j] <- game()
}
require(magrittr)
require(dplyr)
game <- function(){
prize <- sample(c("goat","goat","car"), 3) # Assigning the sequence of car
guess <- sample(1:3,1) # First my guess
game <- data.frame(door = 1:3, prize = prize, stringsAsFactors = FALSE) %>%
mutate(first_guess = case_when(
door == guess ~ 1
, TRUE ~ 0
)) %>%
mutate(potential_reveal = case_when(
first_guess == 1 ~ 0
, prize == "car" ~ 0
, TRUE ~ 1
)) %>%
mutate(reveal = 1*(rank(potential_reveal, ties.method = "random") == 3)) %>%
mutate(switch = case_when(
first_guess == 1 ~ 0
, reveal == 1 ~ 0
, TRUE ~ 1
))
c(game$prize[game$first_guess == 1], game$prize[game$switch == 1])
}
game_number <- rep(NA, 1000)
for (j in seq_along(game_number)) {
game_number[j] <- game() %>% get_last
}
require(magrittr)
require(dplyr)
game <- function(){
prize <- sample(c("goat","goat","car"), 3) # Assigning the sequence of car
guess <- sample(1:3,1) # First my guess
game <- data.frame(door = 1:3, prize = prize, stringsAsFactors = FALSE) %>%
mutate(first_guess = case_when(
door == guess ~ 1
, TRUE ~ 0
)) %>%
mutate(potential_reveal = case_when(
first_guess == 1 ~ 0
, prize == "car" ~ 0
, TRUE ~ 1
)) %>%
mutate(reveal = 1*(rank(potential_reveal, ties.method = "random") == 3)) %>%
mutate(switch = case_when(
first_guess == 1 ~ 0
, reveal == 1 ~ 0
, TRUE ~ 1
))
c(game$prize[game$first_guess == 1], game$prize[game$switch == 1])
}
game_prize_strategy1 <- rep(NA, 1000)
game_prize_strategy2 <- rep(NA, 1000)
for (j in seq_along(game_number)) {
game_prize_strategy1[j] <- game()[1]
game_prize_strategy2[j] <- game()[2]
}
prize <- sample(c("goat","goat","car"), 3)
game <- data.frame(door = 1:3, prize = prize, stringsAsFactors = FALSE) %>%
mutate(first_guess = case_when(
door == guess ~ 1
, TRUE ~ 0
)) %>%
mutate(potential_reveal = case_when(
first_guess == 1 ~ 0
, prize == "car" ~ 0
, TRUE ~ 1
)) %>%
mutate(reveal = 1*(rank(potential_reveal, ties.method = "random") == 3)) %>%
mutate(switch = case_when(
first_guess == 1 ~ 0
, reveal == 1 ~ 0
, TRUE ~ 1
))
c(game$prize[game$first_guess == 1], game$prize[game$switch == 1])
require(magrittr)
require(dplyr)
game <- function(){
prize <- sample(c("goat","goat","car"), 3) # Assigning the sequence of car
guess <- sample(1:3,1) # First my guess
game <- data.frame(door = 1:3, prize = prize, stringsAsFactors = FALSE) %>%
mutate(first_guess = case_when(
door == guess ~ 1
, TRUE ~ 0
)) %>%
mutate(potential_reveal = case_when(
first_guess == 1 ~ 0
, prize == "car" ~ 0
, TRUE ~ 1
)) %>%
mutate(reveal = 1*(rank(potential_reveal, ties.method = "random") == 3)) %>%
mutate(switch = case_when(
first_guess == 1 ~ 0
, reveal == 1 ~ 0
, TRUE ~ 1
))
c(game$prize[game$first_guess == 1], game$prize[game$switch == 1])
}
strategy1 = rep(NA, 100)
strategy2 = rep(NA, 100)
for (i in seq_along(strategy1)) {
strategy1[i] = game()[1]
strategy2[i] = game()[2]
}
wins1 = rep(NA, 100)
wins2 = rep(NA, 100)
for (i in seq_along(strategy1)) {
wins1[i] <- ifelse(strategy1[i]=="car", 1,0)
wins2[i] <- ifelse(strategy2[i]=="car", 1,0)}
mean(wins1)
mean(wins2)
}
require(magrittr)
require(dplyr)
game <- function(){
prize <- sample(c("goat","goat","car"), 3) # Assigning the sequence of car
guess <- sample(1:3,1) # First my guess
game <- data.frame(door = 1:3, prize = prize, stringsAsFactors = FALSE) %>%
mutate(first_guess = case_when(
door == guess ~ 1
, TRUE ~ 0
)) %>%
mutate(potential_reveal = case_when(
first_guess == 1 ~ 0
, prize == "car" ~ 0
, TRUE ~ 1
)) %>%
mutate(reveal = 1*(rank(potential_reveal, ties.method = "random") == 3)) %>%
mutate(switch = case_when(
first_guess == 1 ~ 0
, reveal == 1 ~ 0
, TRUE ~ 1
))
c(game$prize[game$first_guess == 1], game$prize[game$switch == 1])
}
strategy1 = rep(NA, 100)
strategy2 = rep(NA, 100)
for (i in seq_along(strategy1)) {
strategy1[i] = game()[1]
strategy2[i] = game()[2]
}
wins1 = rep(NA, 100)
wins2 = rep(NA, 100)
for (i in seq_along(strategy1)) {
wins1[i] <- ifelse(strategy1[i]=="car", 1,0)
wins2[i] <- ifelse(strategy2[i]=="car", 1,0)}
mean(wins1)
mean(wins2)
rbinom(1, size = 100, prob = .5)
prop.test(x = 74, n = 100, correct = FALSE)
prop.test(x = 740, n = 1000, correct = FALSE)
prop.test(x = 74, n = 100, correct = FALSE)
prop.test(x = 740, n = 1000, correct = FALSE)
if(N<3) stop("Must have at least 3 doors")
prize <- sample(c(rep("goat",N-1),"car"), N)
prize <- sample(c(rep("goat",3),"car"), 4)
guess <- sample(1:4,1)
game <- data.frame(door = 1:4, prize = prize, stringsAsFactors = FALSE) %>%
mutate(first_guess = case_when(
door == guess ~ 1
, TRUE ~ 0
)) %>%
mutate(potential_reveal = case_when(
first_guess == 1 ~ 0
, prize == "car" ~ 0
, TRUE ~ 1
)) %>%
mutate(reveal = 1*(rank(potential_reveal, ties.method = "random") == 3)) %>%
mutate(potential_switch = case_when(
first_guess == 1 ~ 0
, reveal == 1 ~ 0
, TRUE ~ 1
)) %>%
mutate(switch = 1*(rank(potential_switch, ties.method = "random") == 3))
c(game$prize[game$first_guess == 1], game$prize[game$switch == 1])
}
prize <- sample(c(rep("goat",3),"car"), 4)
guess <- sample(1:4,1)
game <- data.frame(door = 1:4, prize = prize, stringsAsFactors = FALSE) %>%
mutate(first_guess = case_when(
door == guess ~ 1
, TRUE ~ 0
)) %>%
mutate(potential_reveal = case_when(
first_guess == 1 ~ 0
, prize == "car" ~ 0
, TRUE ~ 1
)) %>%
mutate(reveal = 1*(rank(potential_reveal, ties.method = "random") == 3)) %>%
mutate(potential_switch = case_when(
first_guess == 1 ~ 0
, reveal == 1 ~ 0
, TRUE ~ 1
)) %>%
mutate(switch = 1*(rank(potential_switch, ties.method = "random") == 3))
c(game$prize[game$first_guess == 1], game$prize[game$switch == 1])
require(magrittr)
require(dplyr)
game <- function(N){
if(N<3) stop("Must have at least 3 doors")
prize <- sample(c(rep("goat",N-1),"car"), N)
guess <- sample(1:N,1)
game <- data.frame(door = 1:N, prize = prize, stringsAsFactors = FALSE) %>%
mutate(first_guess = case_when(
door == guess ~ 1
, TRUE ~ 0
)) %>%
mutate(potential_reveal = case_when(
first_guess == 1 ~ 0
, prize == "car" ~ 0
, TRUE ~ 1
)) %>%
mutate(reveal = 1*(rank(potential_reveal, ties.method = "random") == 3)) %>%
mutate(potential_switch = case_when(
first_guess == 1 ~ 0
, reveal == 1 ~ 0
, TRUE ~ 1
)) %>%
mutate(switch = 1*(rank(potential_switch, ties.method = "random") == 3))
c(game$prize[game$first_guess == 1], game$prize[game$switch == 1])
}
strategy1 = rep(NA, 1000)
strategy2 = rep(NA, 1000)
same_result = rep(NA, 1000)
for (i in seq_along(strategy1)) {
strategy1[i] <- game(N = 4)[1]
strategy2[i] <- game(N = 4)[2]
same_result[i] <- ifelse(((strategy1[i] == "goat")&(strategy2[i] == "goat")), 1, 0)
}
mean(same_result)
strategy1 = rep(NA, 1000) # vector for prize of strategy 1
strategy2 = rep(NA, 1000) # vector for prize of strategy 2
same_result = rep(NA, 1000)
for (i in seq_along(strategy1)) {
strategy1[i] <- ifelse(game(N = 4)[1] == "car", 1, 0)
strategy2[i] <- ifelse(game(N = 4)[2] == "Car", 1, 0)
car_result[i] <- ifelse((strategy1[i] + strategy2[i] >= 1),1,0)
}
strategy1 = rep(NA, 1000) # vector for prize of strategy 1
strategy2 = rep(NA, 1000) # vector for prize of strategy 2
car_result = rep(NA, 1000)
for (i in seq_along(strategy1)) {
strategy1[i] <- ifelse(game(N = 4)[1] == "car", 1, 0)
strategy2[i] <- ifelse(game(N = 4)[2] == "Car", 1, 0)
car_result[i] <- ifelse((strategy1[i] + strategy2[i] >= 1),1,0)
}
strategy1 = rep(NA, 1000) # vector for prize of strategy 1
strategy2 = rep(NA, 1000) # vector for prize of strategy 2
car_result = rep(NA, 1000)
for (i in seq_along(strategy1)) {
strategy1[i] <- ifelse(game(N = 4)[1] == "car", 1, 0)
strategy2[i] <- ifelse(game(N = 4)[2] == "car", 1, 0)
car_result[i] <- ifelse((strategy1[i] + strategy2[i] >= 1),1,0)
}
mean(car_result) # The probability that both strategies result in a goat.
prevalence <- sequence(0.001, 0.1, length = 50)
ppv <- function(prevalence) {
test_positive <- (prevalence * 0.85) + (1 - prevalence) - (1-prevalence)(0.95) # P(T-|D-) = .95
joint_test_positive_status_positive <- prevalence * 0.85 # P(T+|D+) = .85
final = joint_test_positive_status_positive / test_positive
return final
prevalence <- sequence(0.001, 0.1, length = 50)
ppv <- function(prevalence) {
test_positive <- (prevalence * 0.85) + (1 - prevalence) - (1-prevalence)(0.95) # P(T-|D-) = .95
joint_test_positive_status_positive <- prevalence * 0.85 # P(T+|D+) = .85
final = joint_test_positive_status_positive / test_positive
final
}
plot(prevalence, ppv, xlab = "Prevalence", ylab = "PPV")
prevalence <- sequence(0.001, 0.1, length = 50)
ppv <- NA
for (i in 1:length(prevalence)) {
test_positive[i] <- (prevalence * 0.85) + (1 - prevalence[i]) - (1 - prevalence[i])(0.95) # P(T-|D-) = .95
joint_test_positive_status_positive[i] <- prevalence[i] * 0.85 # P(T+|D+) = .85
ppv[i] = joint_test_positive_status_positive[i] / test_positive[i]
}
prevalence <- sequence(0.001, 0.1, length = 50)
ppv <- NA
for (i in 1:length(prevalence)) {
test_positive[i] <- (prevalence * 0.85) + (1 - prevalence[i]) - (1 - prevalence[i])*(0.95) # P(T-|D-) = .95
joint_test_positive_status_positive[i] <- prevalence[i] * 0.85 # P(T+|D+) = .85
ppv[i] = joint_test_positive_status_positive[i] / test_positive[i]
}
prevalence <- sequence(0.001, 0.1, length = 50)
ppv <- NA
test_positive <- NA
joint_test_positive_status_positive <- NA
for (i in 1:length(prevalence)) {
test_positive[i] <- (prevalence * 0.85) + (1 - prevalence[i]) - (1 - prevalence[i])*(0.95) # P(T-|D-) = .95
joint_test_positive_status_positive[i] <- prevalence[i] * 0.85 # P(T+|D+) = .85
ppv[i] = joint_test_positive_status_positive[i] / test_positive[i]
}
prevalence <- sequence(0.001, 0.1, length = 50)
ppv <- NA
test_positive <- NA
joint_test_positive_status_positive <- NA
for (i in 1:length(prevalence)) {
test_positive[i] <- (prevalence[i] * 0.85) + (1 - prevalence[i]) - (1 - prevalence[i])*(0.95) # P(T-|D-) = .95
joint_test_positive_status_positive[i] <- prevalence[i] * 0.85 # P(T+|D+) = .85
ppv[i] = joint_test_positive_status_positive[i] / test_positive[i]
}
plot(prevalence, ppv, xlab = "Prevalence", ylab = "PPV")
prevalence <- sequence(0.001, 0.1, length = 50)
ppv <- NA
test_positive <- NA
joint_test_positive_status_positive <- NA
for (i in 1:length(prevalence)) {
test_positive[i] <- (prevalence[i] * 0.85) + (1 - prevalence[i]) - (1 - prevalence[i])*(0.95) # P(T-|D-) = .95
joint_test_positive_status_positive[i] <- prevalence[i] * 0.85 # P(T+|D+) = .85
ppv[i] = joint_test_positive_status_positive[i] / test_positive[i]
}
ppv
#plot(prevalence, ppv, xlab = "Prevalence", ylab = "PPV")
prevalence <- sequence(0.001, 0.1, length = 50)
ppv <- NA
test_positive <- NA
joint_test_positive_status_positive <- NA
for (i in 1:length(prevalence)) {
test_positive[i] <- (prevalence[i] * 0.85) + (1 - prevalence[i]) - (1 - prevalence[i])*(0.95) # P(T-|D-) = .95
joint_test_positive_status_positive[i] <- prevalence[i] * 0.85 # P(T+|D+) = .85
ppv[i] = joint_test_positive_status_positive[i] / test_positive[i]
}
prevalence
#plot(prevalence, ppv, xlab = "Prevalence", ylab = "PPV")
prevalence <- seq(0.001, 0.1, length = 50)
ppv <- NA
test_positive <- NA
joint_test_positive_status_positive <- NA
for (i in 1:length(prevalence)) {
test_positive[i] <- (prevalence[i] * 0.85) + (1 - prevalence[i]) - (1 - prevalence[i])*(0.95) # P(T-|D-) = .95
joint_test_positive_status_positive[i] <- prevalence[i] * 0.85 # P(T+|D+) = .85
ppv[i] = joint_test_positive_status_positive[i] / test_positive[i]
}
plot(prevalence, ppv, xlab = "Prevalence", ylab = "PPV")
prevalence <- 0.001
ppv
prevalence <- 0.001
test_positive <- (prevalence * 0.85) + (1 - prevalence) - (1 - prevalence)*(0.95) # P(T-|D-) = .95
joint_test_positive_status_positive <- prevalence * 0.85 # P(T+|D+) = .85
ppv = joint_test_positive_status_positive / test_positive
ppv
hospital_charges <- function(N){
group <- rbinom(N, 1, 0.5)
charges <- 0*group + rgamma(N, shape = 2, scale = 2)*(1-group)
charges
}
hospital_charges(100)
rbinom(100, 1, 0.5)
quantile(hospital_charges(), probs = 0.9)
quantile(hospital_charges(100), probs = 0.9)
mean(hospital_charges(30))
N <- 1000
mean_list <- NA
for (i in seq_along(1000)) {
mean_list[i] <- mean(hospital_charges(30))
}
mean_list
N <- 1000
mean_list <- NA
for (i in seq_along(N)) {
mean_list[i] <- mean(hospital_charges(30))
}
mean_list
N <- 1000
mean_list <- NA
for (i in 1:N) {
mean_list[i] <- mean(hospital_charges(30))
}
mean_list
N <- 1000
mean_list <- NA
for (i in 1:N) {
mean_list[i] <- mean(hospital_charges(30))
}
density(mean_list)
N <- 1000
mean_list <- NA
for (i in 1:N) {
mean_list[i] <- mean(hospital_charges(30))
}
hist(mean_list)
N <- 1000
mean_list <- NA
for (i in 1:N) {
mean_list[i] <- mean(hospital_charges(30))
}
plot(mean_list)
N <- 1000
mean_list <- NA
for (i in 1:N) {
mean_list[i] <- mean(hospital_charges(30))
}
plot(density(mean_list))
hospital_charges <- function(N){
group <- rbinom(N, 1, 0.5)
charges <- 0*group + rgamma(N, shape = 2, scale = 2)*(1-group)
charges
}
hospital_charges(30)
pnorm(104, mean = 80, sd = 15)
pnorm(104, mean = 80, sd = 15) - pnorm(70, mean = 80, sd = 15)
x <- seq(0, 200, by = 0.01)
y <- dnorm(x, mean = 80, sd = 15)
plot(x,y)
pnorm(104, mean = 80, sd = 15) - pnorm(70, mean = 80, sd = 15)
x <- seq(0, 160, by = 0.01)
y <- dnorm(x, mean = 80, sd = 15)
plot(x,y)
pnorm(104, mean = 80, sd = 15) - pnorm(70, mean = 80, sd = 15)
femor_length <- 25:50
femor_length <- 25:50
femor_length
set.seed(20394)
suppressPackageStartupMessages(require(mvtnorm))
library(ggplot2)
# Sample Size
N <- 50
# True population correlation
rho <- .8
null_correlation <- 0.8
R <- 5000
sigma <- array(c(1,rho,rho,1), c(2,2))
mu <- c(0,0)
detect <- rep(NA, R)
for(i in 1:R){
data <- rmvnorm(N, mean = mu, sigma = sigma)
# Measurement A is data[,1]
# Measurement B is data[,2]
# Option Alternative = "greater" is one-sided 95% CI
results <- cor.test(x = data[,1], y = data[,2], alternative = "greater")
# Test is lower bound is strictly greater than 0.8
detect[i] <- results$conf.int[1] > null_correlation
}
power <- mean(detect)
power.corr = function(N, rho){
null_correlation <- 0.8
R <- 5000
power = NA
for(j in 1:length(rho)) {
sigma <- array(c(1,rho[j],rho[j],1), c(2,2))
mu <- c(0,0)
detect <- rep(NA, R)
for(i in 1:R){
data <- rmvnorm(N[j], mean = mu, sigma = sigma)
# Measurement A is data[,1]
# Measurement B is data[,2]
# Option Alternative = "greater" is one-sided 95% CI
results <- cor.test(x = data[,1], y = data[,2], alternative = "greater")
# Test is lower bound is strictly greater than 0.8
detect[i] <- results$conf.int[1] > null_correlation
}
power[j] <- mean(detect)
}
return(power)
}
# Sample Size
N <- c(25, 50, 75, 100)
# True population correlation
rho <- seq(0.8, 0.95, by = 0.01)
results1 <- expand.grid(N = N, rho = rho, power = NA)
for(i in 1:nrow(results1)) {
results1[i,3] = power.corr(N = results1[i,1], rho = results1[i,2])
}
ggplot(mapping = aes(x = rho, y = power, col = factor(N)), data = results1) +
geom_line() +
theme_bw() +
labs(x = "Correlation", y = "Power")
